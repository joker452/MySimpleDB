package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private final JoinPredicate p;
    private OpIterator[] children;
    private TupleDesc td;
    private String field1Name;
    private String field2Name;
    private Tuple t1;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.p = p;
        children = new OpIterator[]{child1, child2};
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     * alias or table name.
     */
    public String getJoinField1Name() {
        // some code goes here
        if (field1Name == null) {
            field1Name = children[0].getTupleDesc().getFieldName(p.getField1());
        }
        return field1Name;
    }

    /**
     * @return the field name of join field2. Should be quantified by
     * alias or table name.
     */
    public String getJoinField2Name() {
        // some code goes here
        if (field2Name == null) {
            field2Name = children[1].getTupleDesc().getFieldName(p.getField2());
        }
        return field2Name;
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     * implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        if (td == null)
            td = TupleDesc.merge(children[0].getTupleDesc(), children[1].getTupleDesc());
        return td;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        children[0].open();
        children[1].open();
    }

    public void close() {
        // some code goes here
        super.close();
        children[0].close();
        children[1].close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        children[0].rewind();
        children[1].rewind();
        t1 = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        while (children[0].hasNext() || t1 != null) {
            if (t1 == null)
                t1 = children[0].next();
            while (children[1].hasNext()) {
                Tuple t2 = children[1].next();
                if (p.filter(t1, t2)) {
                    Tuple t = new Tuple(getTupleDesc());
                    int t1Fields = t1.getTupleDesc().numFields();
                    int t2Fields = t2.getTupleDesc().numFields();
                    for (int i = 0; i < t1Fields; ++i)
                        t.setField(i, t1.getField(i));
                    for (int i = 0; i < t2Fields; ++i)
                        t.setField(i + t1Fields, t2.getField(i));
                    return t;
                }
            }
            children[1].rewind();
            t1 = null;
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return children;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        this.children = children;
        td = null;
        t1 = null;
        field1Name = field2Name = null;
    }

}
